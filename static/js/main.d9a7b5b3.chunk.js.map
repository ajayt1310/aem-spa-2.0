{"version":3,"sources":["images/icon-close.svg","images/gspann-logo.svg","images/icon-loading.svg","api/useGraphQL.js","components/Error.js","components/Loading.js","components/Adventures.js","components/aem/AEMResponsiveGrid.js","components/AdventureDetail.js","components/aem/AEMTitle.js","components/aem/AEMText.js","components/aem/AEMImage.js","App.js","index.js"],"names":["module","exports","AEMHeadless","require","REACT_APP_GRAPHQL_ENDPOINT","process","useGraphQL","query","path","useState","data","setData","errorMessage","setErrors","useEffect","sdk","postQuery","bind","getQuery","then","errors","map","error","message","join","mapErrors","catch","Error","className","this","props","Component","REACT_APP_PUBLIC_URI","Loading","src","loadingIcon","alt","AdventureItem","_path","adventureTitle","adventurePrimaryImage","to","adventureTripLength","adventurePrice","filterQuery","activity","Adventures","setQuery","onClick","adventureList","items","adventure","index","key","RESOURCE_TYPE","EditConfig","emptyLabel","isEmpty","cqItemsOrder","length","resourceType","MapTo","ResponsiveGrid","AEMResponsiveGrid","withMappable","Contributer","pictureReference","fullName","occupation","withRouter","contentFragmentPath","location","pathname","substring","match","url","adventureData","adventureByPath","item","adventureName","split","pop","backIcon","adventureActivity","adventureType","adventureGroupSize","adventureDifficulty","dangerouslySetInnerHTML","__html","adventureDescription","html","pagePath","itemPath","adventureItinerary","adventureContributor","TitleV2IsEmptyFn","TitleV2","AEMTitle","TextV2IsEmptyFn","TextV2","ImageV2IsEmptyFn","ImageV2","Home","App","logo","ModelManager","initializeAsync","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,2OCCpCC,EAAeC,EAAQ,IAAvBD,YAICE,EAA+BC,+HAA/BD,2BA0COE,MAnCf,SAAoBC,EAAOC,GACvB,MAAsBC,mBAAS,MAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAgCF,mBAAS,MAAzC,mBAAKG,EAAL,KAAmBC,EAAnB,KAsBA,OApBAC,qBAAU,WACR,IAAMC,EAAM,IAAIb,EAAYE,IACZG,EAAQQ,EAAIC,UAAUC,KAAKF,GAAOA,EAAIG,SAASD,KAAKF,IAE5DR,GAASC,GACdW,MAAK,YAAuB,IAApBT,EAAmB,EAAnBA,KAAMU,EAAa,EAAbA,OAEVA,GACDP,EAmBZ,SAAmBO,GACf,OAAOA,EAAOC,KAAI,SAACC,GAAD,OAAWA,EAAMC,WAASC,KAAK,KApB/BC,CAAUL,IAGnBV,GACDC,EAAQD,MAGXgB,OAAM,SAACJ,GACNT,EAAUS,QAEb,CAACf,EAAOC,IAEJ,CAACE,OAAME,iB,gCCzBHe,E,4JAPX,WACI,OAAQ,yBAAKC,UAAU,SACjB,0BAAMA,UAAU,iBAAhB,iBAA2CC,KAAKC,MAAMlB,oB,GAJhDmB,a,iBCCXC,EAAyB3B,+HAAzB2B,qBAWMC,E,4JAPX,WACI,OAAQ,yBAAKL,UAAU,WACjB,yBAAKM,IAAKF,EAAuB,IAAMG,IAAaC,IAAI,oB,GAJhDL,a,MC0CtB,SAASM,EAAcP,GAGrB,OAAIA,GAAUA,EAAMQ,OAAUR,EAAMS,gBAAmBT,EAAMU,sBAIvD,wBAAIZ,UAAU,kBACZ,kBAAC,OAAD,CAAMa,GAAE,qBAAgBX,EAAMQ,QAC5B,yBAAKV,UAAU,uBAAuBM,IAAKJ,EAAMU,sBAAsBF,MAClEF,IAAKN,EAAMS,kBAElB,yBAAKX,UAAU,+BACb,yBAAKA,UAAU,yBAAyBE,EAAMY,qBAC9C,yBAAKd,UAAU,wBAAwBE,EAAMa,iBAE/C,yBAAKf,UAAU,wBAAwBE,EAAMS,iBAZ5C,KAoBX,SAASK,EAAYC,GACnB,MAAM,0IAAN,OAMsBA,EANtB,qWA+BaC,MA/Ff,WAII,MAA0BrC,mBAAS,IAAnC,mBAAOF,EAAP,KAAcwC,EAAd,KAGA,EAA+BzC,EAAWC,EAFlB,uBAEhBG,EAAR,EAAQA,KAAME,EAAd,EAAcA,aAGd,OAAGA,EAAqB,kBAAC,EAAD,CAAOA,aAAcA,IAGzCF,EAGA,yBAAKkB,UAAU,cACb,4BAAQoB,QAAS,kBAAMD,EAAS,MAAhC,OACA,4BAAQC,QAAS,kBAAMD,EAASH,EAAY,cAA5C,WACA,4BAAQI,QAAS,kBAAMD,EAASH,EAAY,cAA5C,WACA,4BAAQI,QAAS,kBAAMD,EAASH,EAAY,aAA5C,UACA,4BAAQI,QAAS,kBAAMD,EAASH,EAAY,cAA5C,WACA,4BAAQI,QAAS,kBAAMD,EAASH,EAAY,oBAA5C,iBACA,4BAAQI,QAAS,kBAAMD,EAASH,EAAY,aAA5C,UACA,wBAAIhB,UAAU,mBAGRlB,EAAKuC,cAAcC,MAAM7B,KAAI,SAAC8B,EAAWC,GACrC,OACI,kBAACf,EAAD,eAAegB,IAAKD,GAAWD,SAhBlC,kBAAC,EAAD,O,wBCdfG,EAAgB,2CAGhBC,EAAa,CACfC,WAAY,mBACZC,QAAS,SAAS3B,GACd,OAA6B,MAAtBA,EAAM4B,cAAsD,IAA9B5B,EAAM4B,aAAaC,QAE5DC,aAAcN,GAIlBO,gBAAMP,EAANO,CAAqBC,iBAAgBP,GAGrC,IAEeQ,EAFWC,uBAAaF,iBAAgBP,GCZ9CvB,G,MAAyB3B,+HAAzB2B,sBA2GT,SAASiC,EAAYnC,GAEnB,IAAIA,EACF,OAAO,KAET,IAAIoC,EAAmB,KAKvB,OAJGpC,EAAMoC,mBACNA,EAAoB,yBAAKtC,UAAU,oBAAoBM,IAAKJ,EAAMoC,iBAAiB5B,MAAOF,IAAKN,EAAMqC,YAItG,yBAAKvC,UAAU,eACb,wBAAIA,UAAU,0BACbsC,EACD,wBAAItC,UAAU,oBAAoBE,EAAMqC,UACxC,wBAAIvC,UAAU,0BAA0BE,EAAMsC,aAKrCC,mBA7Hf,SAAyBvC,GAGrB,IAAMwC,EAAsBxC,EAAMyC,SAASC,SAASC,UAAU3C,EAAM4C,MAAMC,IAAIhB,QAG9E,EAA+BrD,EAmE3B,mCAAN,OAnEiEgE,EAmEjE,qlBAnEU5D,EAAR,EAAQA,KAAME,EAAd,EAAcA,aAGd,GAAGA,EAAc,OAAO,kBAAC,EAAD,CAAOA,aAAcA,IAG7C,IAAIF,EAAM,OAAO,kBAAC,EAAD,MAGjB,IAAIkE,EAAgBlE,EAAKmE,gBAAgBC,KAGnCC,EAAgBH,EAActC,MAAM0C,MAAM,KAAKC,MAGrD,OAAIL,GAAkBA,EAActC,OAAUsC,EAAcrC,gBAAmBqC,EAAcpC,sBAYzF,yBAAKZ,UAAU,oBACb,kBAAC,OAAD,CAAMA,UAAU,gCAAgCa,GAAI,KAClD,yBAAKb,UAAU,kBAAkBM,IAAKF,EAAuB,IAAMkD,IAAU9C,IAAI,YAEnF,wBAAIR,UAAU,0BAA0BgD,EAAcrC,gBACtD,yBAAKX,UAAU,yBACb,yBAAKA,UAAU,+BAAf,YACA,yBAAKA,UAAU,qCAAqCgD,EAAcO,mBAClE,yBAAKvD,UAAU,+BAAf,QACA,yBAAKA,UAAU,qCAAqCgD,EAAcQ,eAClE,yBAAKxD,UAAU,+BAAf,eACA,yBAAKA,UAAU,qCAAqCgD,EAAclC,qBAClE,yBAAKd,UAAU,+BAAf,cACA,yBAAKA,UAAU,qCAAqCgD,EAAcS,oBAClE,yBAAKzD,UAAU,+BAAf,cACA,yBAAKA,UAAU,qCAAqCgD,EAAcU,qBAClE,yBAAK1D,UAAU,+BAAf,SACA,yBAAKA,UAAU,qCAAqCgD,EAAcjC,iBAEpE,yBAAKf,UAAU,4BACb,yBAAKA,UAAU,gCACVM,IAAK0C,EAAcpC,sBAAsBF,MAAOF,IAAKwC,EAAcrC,iBACxE,yBAAKgD,wBAAyB,CAACC,OAAQZ,EAAca,qBAAqBC,QAE1E,kBAAC,EAAD,CACIC,SAAQ,iDAA4CZ,GACpDa,SAAS,wBAEb,yCACA,6BACA,yBAAKhE,UAAU,6BACV2D,wBAAyB,CAACC,OAAQZ,EAAciB,mBAAmBH,QACxE,kBAACzB,EAAgBW,EAAckB,wBA1CnC,yBAAKlE,UAAU,oBACb,kBAAC,OAAD,CAAMA,UAAU,gCAAgCa,GAAI,KAClD,yBAAKb,UAAU,kBAAkBM,IAAKF,EAAuB,IAAKkD,IAAU9C,IAAI,YAElF,kBAAC,EAAD,CAAOxB,aAAa,uD,OC7BvB2C,EAAa,CACfC,WAAY,QACZC,QAASsC,mBACTnC,aANkB,6BAUtBC,gBAVsB,4BAUtBA,CAAqBmC,UAASzC,GAG/B,IAEe0C,EAFEjC,uBAAagC,UAASzC,GCfjCA,EAAa,CACfC,WAAY,OACZC,QAASyC,kBACTtC,aALkB,4BAQtBC,gBARsB,2BAQtBA,CAAqBsC,SAAQ5C,GAEbS,uBAAamC,SAAQ5C,G,MAArC,ICNMA,EAAa,CACfC,WAAY,QACZC,QAAS2C,mBACTxC,aALkB,6BAQtBC,gBARsB,4BAQtBA,CAAqBwC,UAAS9C,GAEbS,uBAAaqC,UAAS9C,G,MAAvC,ICHSvB,EAAyB3B,+HAAzB2B,qBA2BT,SAASsE,IACP,OACE,yBAAK1E,UAAU,QACX,kBAAC,EAAD,CACI+D,SAAS,+BACTC,SAAS,wBAEb,kBAAC,EAAD,CACID,SAAS,+BACTC,SAAS,eACf,kBAAC,EAAD,OAKSW,MAxCf,WAEE,OACE,kBAAC,gBAAD,KACE,yBAAK3E,UAAU,OACb,gCACE,yBAAKM,IAAKF,EAAuB,IAAMwE,IAAM5E,UAAU,OAAOQ,IAAI,gBAClE,8BAEJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO5B,KAAK,mBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC8F,EAAD,W,MCrBVG,aAAaC,kBAEbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d9a7b5b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-close.f227c489.svg\";","module.exports = __webpack_public_path__ + \"static/media/gspann-logo.dc08ac36.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-loading.200bc7ed.svg\";","import {useState, useEffect} from 'react';\nconst {AEMHeadless} = require('@adobe/aem-headless-client-js')\n\n\n// environment variable REACT_APP_GRAPHQL_ENDPOINT is used to point to endpoint in AEM\nconst { REACT_APP_GRAPHQL_ENDPOINT } = process.env;\n\n/**\n * Custom React Hook to perform a GraphQL query\n * @param query - GraphQL query\n * @param path - Persistent query path\n */\nfunction useGraphQL(query, path) {\n    let [data, setData] = useState(null);\n    let [errorMessage, setErrors] = useState(null);\n\n    useEffect(() => {\n      const sdk = new AEMHeadless(REACT_APP_GRAPHQL_ENDPOINT)\n      const request = query ? sdk.postQuery.bind(sdk) : sdk.getQuery.bind(sdk);\n\n      request(query || path)\n        .then(({ data, errors }) => {\n          //If there are errors in the response set the error message\n          if(errors) {\n            setErrors(mapErrors(errors));\n          }\n          //If data in the response set the data as the results\n          if(data) {\n            setData(data);\n          }\n        })\n        .catch((error) => {\n          setErrors(error);\n        });\n    }, [query, path]);\n\n    return {data, errorMessage}\n}\n\n/**\n * concatenate error messages into a single string.\n * @param {*} errors\n */\nfunction mapErrors(errors) {\n    return errors.map((error) => error.message).join(\",\");\n}\n\nexport default useGraphQL\n","import React, {Component} from 'react';\n\nclass Error extends Component {\n\n    render() {\n        return (<div className=\"error\">\n              <span className=\"error-message\">{`Error: ${this.props.errorMessage}`}</span>\n          </div>);\n    }\n}\n\nexport default Error;","import React, {Component} from 'react';\nimport loadingIcon from '../images/icon-loading.svg';\n\nconst {  REACT_APP_PUBLIC_URI } = process.env;\n\nclass Loading extends Component {\n\n    render() {\n        return (<div className=\"loading\">\n              <img src={REACT_APP_PUBLIC_URI + '/' + loadingIcon} alt=\"Loading...\" />\n          </div>);\n    }\n}\n\nexport default Loading;","import React, {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport useGraphQL from '../api/useGraphQL';\nimport Error from './Error';\nimport Loading from './Loading';\nimport './Adventures.scss';\n\n\nfunction Adventures() {\n    //Use React Hooks to set the initial GraphQL query to a variable named `query`\n    // If query is not defined, persistent query will be requested\n    // Initially use cached / persistent query.\n    const [query, setQuery] = useState('');\n    const persistentQuery = 'wknd/adventures-all';\n    //Use a custom React Hook to execute the GraphQL query\n    const { data, errorMessage } = useGraphQL(query, persistentQuery);\n\n    //If there is an error with the GraphQL query\n    if(errorMessage) return <Error errorMessage={errorMessage} />;\n\n    //If data is null then return a loading state...\n    if(!data) return <Loading />;\n    \n    return (\n        <div className=\"adventures\">\n          <button onClick={() => setQuery('')}>All</button>\n          <button onClick={() => setQuery(filterQuery('Camping'))}>Camping</button>\n          <button onClick={() => setQuery(filterQuery('Surfing'))}>Surfing</button>\n          <button onClick={() => setQuery(filterQuery('Skiing'))}>Skiing</button>\n          <button onClick={() => setQuery(filterQuery('Cycling'))}>Cycling</button>\n          <button onClick={() => setQuery(filterQuery('Rock Climbing'))}>Rock Climbing</button>\n          <button onClick={() => setQuery(filterQuery('Social'))}>Social</button>\n          <ul className=\"adventure-items\">\n            {\n                //Iterate over the returned data items from the query\n                data.adventureList.items.map((adventure, index) => {\n                    return (\n                        <AdventureItem key={index} {...adventure} />\n                    );\n                })\n            }\n            </ul>\n        </div>\n    );\n}\n\n// Render individual Adventure item\nfunction AdventureItem(props) {\n\n  //Must have title, path, and image\n  if(!props || !props._path || !props.adventureTitle || !props.adventurePrimaryImage ) {\n    return null;\n  }\n  return (\n        <li className=\"adventure-item\">\n          <Link to={`/adventure:${props._path}`}>\n            <img className=\"adventure-item-image\" src={props.adventurePrimaryImage._path} \n                 alt={props.adventureTitle}/>\n          </Link>\n          <div className=\"adventure-item-length-price\">\n            <div className=\"adventure-item-length\">{props.adventureTripLength}</div>\n            <div className=\"adventure-item-price\">{props.adventurePrice}</div>\n          </div>\n          <div className=\"adventure-item-title\">{props.adventureTitle}</div>\n      </li>\n      );\n}\n\n/**\n * Returns a query for Adventures filtered by activity\n */\nfunction filterQuery(activity) {\n  return `\n    {\n      adventureList (filter: {\n        adventureActivity: {\n          _expressions: [\n            {\n              value: \"${activity}\"\n            }\n          ]\n        }\n      }){\n        items {\n          _path\n        adventureTitle\n        adventurePrice\n        adventureTripLength\n        adventurePrimaryImage {\n          ... on ImageRef {\n            _path\n            mimeType\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n  `;\n}\n\n\nexport default Adventures;\n","// Import the withMappable API provided bu the AEM SPA Editor JS SDK\nimport { withMappable, MapTo } from '@adobe/aem-react-editable-components';\n\n// Import the base ResponsiveGrid component\nimport { ResponsiveGrid } from \"@adobe/aem-react-editable-components\";\n\n// The sling:resourceType for which this Core Component is registered with in AEM\nconst RESOURCE_TYPE = \"wcm/foundation/components/responsivegrid\";\n\n// Create an EditConfig to allow the AEM SPA Editor to properly render the component in the Editor's context\nconst EditConfig = {\n    emptyLabel: \"Layout Container\",  // The component placeholder in AEM SPA Editor\n    isEmpty: function(props) { \n        return props.cqItemsOrder == null || props.cqItemsOrder.length === 0;\n    },                              // The function to determine if this component has been authored\n    resourceType: RESOURCE_TYPE     // The sling:resourceType this SPA component is mapped to\n};\n\n// MapTo allows the AEM SPA Editor JS SDK to dynamically render components added to SPA Editor Containers\nMapTo(RESOURCE_TYPE)(ResponsiveGrid, EditConfig);\n\n// withMappable allows the component to be hardcoded into the SPA; <AEMResponsiveGrid .../>\nconst AEMResponsiveGrid = withMappable(ResponsiveGrid, EditConfig);\n\nexport default AEMResponsiveGrid;","import React from 'react';\nimport { withRouter, Link} from \"react-router-dom\";\nimport useGraphQL from '../api/useGraphQL';\nimport backIcon from '../images/icon-close.svg';\nimport Error from './Error';\nimport Loading from './Loading';\nimport AEMResponsiveGrid from '../components/aem/AEMResponsiveGrid';\n\nimport './AdventureDetail.scss';\n\nconst {  REACT_APP_PUBLIC_URI } = process.env;\n\nfunction AdventureDetail(props) {\n\n    //parse the content fragment from the url\n    const contentFragmentPath = props.location.pathname.substring(props.match.url.length);\n\n    //Use a custom React Hook to execute the GraphQL query\n    const { data, errorMessage } = useGraphQL(adventureDetailQuery(contentFragmentPath));\n\n    //If there is an error with the GraphQL query\n    if(errorMessage) return <Error errorMessage={errorMessage} />;\n\n    //If data is null then return a loading icon...\n    if(!data) return <Loading />;\n\n    //Set adventureData variable based on graphQL response\n    let adventureData = data.adventureByPath.item;\n\n    // Get the last segment of the Adventure Content Fragment path to used to generate the pagePath for the AEMResponsiveGrid\n    const adventureName = adventureData._path.split('/').pop();\n\n    //Must have title, path, and image\n    if(!adventureData || !adventureData._path || !adventureData.adventureTitle || !adventureData.adventurePrimaryImage ) {\n      return (\n        <div className=\"adventure-detail\">\n          <Link className=\"adventure-detail-close-button\" to={\"/\"}>\n            <img className=\"Backbutton-icon\" src={REACT_APP_PUBLIC_URI + '/' +backIcon} alt=\"Return\" />\n          </Link>\n          <Error errorMessage=\"Missing data, adventure could not be rendered.\" />\n        </div>\n      );\n    }\n    \n    return (\n        <div className=\"adventure-detail\">\n          <Link className=\"adventure-detail-close-button\" to={\"/\"}>\n            <img className=\"Backbutton-icon\" src={REACT_APP_PUBLIC_URI + '/' + backIcon} alt=\"Return\" />\n          </Link>\n          <h1 className=\"adventure-detail-title\">{adventureData.adventureTitle}</h1>\n          <div className=\"adventure-detail-info\">\n            <div className=\"adventure-detail-info-label\">Activity</div>\n            <div className=\"adventure-detail-info-description\">{adventureData.adventureActivity}</div>\n            <div className=\"adventure-detail-info-label\">Type</div>\n            <div className=\"adventure-detail-info-description\">{adventureData.adventureType}</div>\n            <div className=\"adventure-detail-info-label\">Trip Length</div>\n            <div className=\"adventure-detail-info-description\">{adventureData.adventureTripLength}</div>\n            <div className=\"adventure-detail-info-label\">Group Size</div>\n            <div className=\"adventure-detail-info-description\">{adventureData.adventureGroupSize}</div>\n            <div className=\"adventure-detail-info-label\">Difficulty</div>\n            <div className=\"adventure-detail-info-description\">{adventureData.adventureDifficulty}</div>\n            <div className=\"adventure-detail-info-label\">Price</div>\n            <div className=\"adventure-detail-info-description\">{adventureData.adventurePrice}</div>\n          </div>\n          <div className=\"adventure-detail-content\">\n            <img className=\"adventure-detail-primaryimage\"\n                 src={adventureData.adventurePrimaryImage._path} alt={adventureData.adventureTitle}/>\n            <div dangerouslySetInnerHTML={{__html: adventureData.adventureDescription.html}}></div>\n            \n            <AEMResponsiveGrid \n                pagePath={`/content/wknd-app/us/en/home/adventure/${adventureName}`}\n                itemPath=\"root/responsivegrid\"/>\n\n            <h2>Itinerary</h2>\n            <hr />\n            <div className=\"adventure-detail-itinerary\"\n                 dangerouslySetInnerHTML={{__html: adventureData.adventureItinerary.html}}></div>\n            <Contributer {...adventureData.adventureContributor} />\n          </div>\n\n        </div>\n    );\n}\n\nfunction adventureDetailQuery(_path) {\n  return `{\n    adventureByPath (_path: \"${_path}\") {\n      item {\n        _path\n          adventureTitle\n          adventureActivity\n          adventureType\n          adventurePrice\n          adventureTripLength\n          adventureGroupSize\n          adventureDifficulty\n          adventurePrice\n          adventurePrimaryImage {\n            ... on ImageRef {\n              _path\n              mimeType\n              width\n              height\n            }\n          }\n          adventureDescription {\n            html\n          }\n          adventureItinerary {\n            html\n          }\n      }\n    }\n  }\n  `;\n}\n\nfunction Contributer(props) {\n\n  if(!props) {\n    return null;\n  }\n  let pictureReference = null;\n  if(props.pictureReference) {\n     pictureReference =  <img className=\"contributor-image\" src={props.pictureReference._path} alt={props.fullName} />\n  }\n\n  return (\n    <div className=\"contributor\">\n      <hr className=\"contributor-separator\" />\n      {pictureReference}\n      <h3 className=\"contributor-name\">{props.fullName}</h3>\n      <h4 className=\"contributor-occupation\">{props.occupation}</h4>\n    </div>);\n}\n\n\nexport default withRouter(AdventureDetail);\n"," // Import the withMappable API provided bu the AEM SPA Editor JS SDK\n import { withMappable, MapTo } from '@adobe/aem-react-editable-components';\n\n // Import the AEM React Core Components' Title component implementation and it's Empty Function \n import { TitleV2, TitleV2IsEmptyFn } from \"@adobe/aem-core-components-react-base\";\n\n // The sling:resourceType for which this Core Component is registered with in AEM\n const RESOURCE_TYPE = \"wknd-app/components/title\";\n\n // Create an EditConfig to allow the AEM SPA Editor to properly render the component in the Editor's context\n const EditConfig = {    \n     emptyLabel: \"Title\",  // The component placeholder in AEM SPA Editor\n     isEmpty: TitleV2IsEmptyFn, // The function to determine if this component has been authored\n     resourceType: RESOURCE_TYPE // The sling:resourceType this component is mapped to\n };\n\n // MapTo allows the AEM SPA Editor JS SDK to dynamically render components added to SPA Editor Containers\n MapTo(RESOURCE_TYPE)(TitleV2, EditConfig);\n\n // withMappable allows the component to be hardcoded into the SPA; <AEMTitle .../>\nconst AEMTitle = withMappable(TitleV2, EditConfig);\n\nexport default AEMTitle;","import { withMappable, MapTo } from '@adobe/aem-react-editable-components';\nimport { TextV2, TextV2IsEmptyFn } from \"@adobe/aem-core-components-react-base\";\n\nconst RESOURCE_TYPE = \"wknd-app/components/text\";\n\nconst EditConfig = {    \n    emptyLabel: \"Text\",\n    isEmpty: TextV2IsEmptyFn,\n    resourceType: RESOURCE_TYPE\n};\n\nMapTo(RESOURCE_TYPE)(TextV2, EditConfig);\n\nconst AEMText = withMappable(TextV2, EditConfig);\n\nexport default AEMText;","import { withMappable, MapTo } from '@adobe/aem-react-editable-components';\nimport { ImageV2, ImageV2IsEmptyFn } from \"@adobe/aem-core-components-react-base\";\n\nimport './AEMImage.scss';\n\nconst RESOURCE_TYPE = \"wknd-app/components/image\";\n\nconst EditConfig = {    \n    emptyLabel: \"Image\",\n    isEmpty: ImageV2IsEmptyFn,\n    resourceType: RESOURCE_TYPE\n};\n\nMapTo(RESOURCE_TYPE)(ImageV2, EditConfig);\n\nconst AEMImage = withMappable(ImageV2, EditConfig);\n\nexport default AEMImage;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport logo from './images/gspann-logo.svg';\nimport Adventures from './components/Adventures';\nimport AdventureDetail from './components/AdventureDetail';\nimport AEMResponsiveGrid from './components/aem/AEMResponsiveGrid';\nimport AEMTitle from './components/aem/AEMTitle';\nimport AEMText from './components/aem/AEMText';\nimport AEMImage from './components/aem/AEMImage';\n\nimport './App.scss';\n\nconst {  REACT_APP_PUBLIC_URI } = process.env;\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <header>\n          <img src={REACT_APP_PUBLIC_URI + '/' + logo} className=\"logo\" alt=\"Gspann Logo\"/>\n          <hr />\n        </header>\n      <Switch>\n        <Route path='/adventure:path'>\n          <AdventureDetail />\n        </Route>  \n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n      </div>\n    </Router>   \n  );\n}\n\n/***\n * Displays a grid of current adventures\n */\nfunction Home() {\n  return (\n    <div className=\"Home\">\n        <AEMResponsiveGrid\n            pagePath='/content/wknd-app/us/en/home' \n            itemPath='root/responsivegrid'/>\n\n        <AEMTitle\n            pagePath='/content/wknd-app/us/en/home' \n            itemPath='root/title'/>\n      <Adventures />\n  </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { ModelManager } from \"@adobe/aem-spa-page-model-manager\";\n\n// Initialize the ModelManager before invoking ReactDOM.render(...).\nModelManager.initializeAsync();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}